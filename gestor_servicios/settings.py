"""
Django settings for gestor_servicios project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'dev-insecure-key-change-me')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', '1') == '1'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '*').split(',') if os.getenv('ALLOWED_HOSTS') else ['*']

# For development convenience: when DEBUG is enabled allow common local hosts
# and optionally allow ngrok subdomains (useful when exposing local server via ngrok).
# Control with ALLOW_NGROK environment variable (default '1' enabled).
if DEBUG:
    # If ALLOWED_HOSTS contains '*' don't change anything
    if ALLOWED_HOSTS != ['*'] and '*' not in ALLOWED_HOSTS:
        # ensure common local hosts are present
        for _h in ("127.0.0.1", "localhost", "[::1]"):
            if _h not in ALLOWED_HOSTS:
                ALLOWED_HOSTS.append(_h)
        # Optionally allow ngrok subdomains (e.g. e4921ef9954a.ngrok-free.app)
        allow_ngrok = os.getenv('ALLOW_NGROK', '1') == '1'
        if allow_ngrok and '.ngrok-free.app' not in ALLOWED_HOSTS:
            # Leading dot allows subdomains and the naked domain
            ALLOWED_HOSTS.append('.ngrok-free.app')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party
    'channels',
    'crispy_forms',
    'crispy_bootstrap5',
    # Local apps
    'accounts',
    'oficinas',
    'tickets',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'accounts.middleware.ApprovalRequiredMiddleware',
    'gestor_servicios.middleware.FriendlyPermissionDeniedMiddleware',
]

ROOT_URLCONF = 'gestor_servicios.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # App brand (logo/name) available on all templates
                'gestor_servicios.context_processors.brand',
            ],
        },
    },
]

WSGI_APPLICATION = 'gestor_servicios.wsgi.application'
ASGI_APPLICATION = 'gestor_servicios.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.parse(
        os.getenv('DATABASE_URL', f"sqlite:///{BASE_DIR / 'db.sqlite3'}"),
        conn_max_age=600,
        ssl_require=os.getenv('DB_SSL_REQUIRE', '0') == '1',
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es'

TIME_ZONE = 'America/Bogota'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static']

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Custom user & auth
AUTH_USER_MODEL = 'accounts.CustomUser'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'login'
LOGIN_URL = 'login'

# Crispy
CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'
CRISPY_TEMPLATE_PACK = 'bootstrap5'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'no-reply@example.com')

# Channels - In-memory layer for development
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
        'CONFIG': {
            'capacity': 100,
            'expiry': 60,
        },
    }
}

# --- App Branding (logo and name) ---
# You can override these with environment variables or in your .env file
# APP_BRAND_NAME: Text shown next to the logo in the top navbar
# APP_BRAND_TAGLINE: Optional smaller text; not shown by default
# APP_BRAND_LOGO: Static path (relative to STATIC_URL) to your logo file
APP_BRAND_NAME = os.getenv('APP_BRAND_NAME', 'PumaSP')
APP_BRAND_TAGLINE = os.getenv('APP_BRAND_TAGLINE', '')
# Default to favicon.svg to avoid missing file; place your own under static/branding/logo.svg and set APP_BRAND_LOGO
APP_BRAND_LOGO = os.getenv('APP_BRAND_LOGO', 'favicon.svg')

# CSRF trusted origins
# You can set CSRF_TRUSTED_ORIGINS env var as a comma-separated list of full origins
# (including scheme), or set NGROK_HOSTS (comma-separated hostnames) when exposing
# the local server through ngrok. In development (DEBUG=True) we add http://localhost
# and http://127.0.0.1 by default. For ngrok, set NGROK_HOSTS=e4921ef9954a.ngrok-free.app
CSRF_TRUSTED_ORIGINS = []
if os.getenv('CSRF_TRUSTED_ORIGINS'):
    for origin in os.getenv('CSRF_TRUSTED_ORIGINS').split(','):
        origin = origin.strip()
        if origin:
            CSRF_TRUSTED_ORIGINS.append(origin)

if DEBUG:
    # local dev HTTP origins
    for dev_origin in ('http://127.0.0.1', 'http://localhost'):
        if dev_origin not in CSRF_TRUSTED_ORIGINS:
            CSRF_TRUSTED_ORIGINS.append(dev_origin)

    # Allow specifying ngrok hostnames in NGROK_HOSTS env (comma separated).
    # Each entry should be the hostname only (no scheme), e.g. e4921ef9954a.ngrok-free.app
    allow_ngrok = os.getenv('ALLOW_NGROK', '1') == '1'
    ngrok_hosts = os.getenv('NGROK_HOSTS')
    if allow_ngrok and ngrok_hosts:
        for host in ngrok_hosts.split(','):
            host = host.strip()
            if not host:
                continue
            origin = host
            # ensure scheme present: ngrok uses https by default
            if not origin.startswith('http://') and not origin.startswith('https://'):
                origin = 'https://' + origin
            if origin not in CSRF_TRUSTED_ORIGINS:
                CSRF_TRUSTED_ORIGINS.append(origin)

# If CSRF_TRUSTED_ORIGINS is still empty, we attempt to populate from ALLOWED_HOSTS
# by converting simple hostnames to https://host (useful if you set ALLOWED_HOSTS explicitly).
if not CSRF_TRUSTED_ORIGINS and ALLOWED_HOSTS:
    for h in ALLOWED_HOSTS:
        if not h or h == '*' or h.startswith('.'):
            continue
        # skip IPs/localhost already covered
        if h in ('127.0.0.1', 'localhost', '[::1]'):
            continue
        origin = h
        if not origin.startswith('http://') and not origin.startswith('https://'):
            origin = 'https://' + origin
        if origin not in CSRF_TRUSTED_ORIGINS:
            CSRF_TRUSTED_ORIGINS.append(origin)
